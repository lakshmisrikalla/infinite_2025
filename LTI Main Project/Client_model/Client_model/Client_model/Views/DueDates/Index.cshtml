@model IEnumerable<object>
@{
    ViewBag.Title = "Due Dates";
}

@functions {
    // Safe property getter: supports IDictionary (Expando/anonymous with IDictionary), properties and fields.
    private object GetPropValue(object obj, string propName)
    {
        if (obj == null) return null;

        // If it's a dictionary-like object (ExpandoObject / IDictionary)
        var dict = obj as System.Collections.IDictionary;
        if (dict != null)
        {
            if (dict.Contains(propName)) return dict[propName];
            // some dictionaries use case-insensitive keys or different names - try string keys
            foreach (var k in dict.Keys)
            {
                if (k != null && string.Equals(k.ToString(), propName, StringComparison.OrdinalIgnoreCase))
                    return dict[k];
            }
        }

        // Try properties
        var t = obj.GetType();
        var pi = t.GetProperty(propName);
        if (pi != null)
        {
            try { return pi.GetValue(obj, null); } catch { return null; }
        }

        // Try fields
        var fi = t.GetField(propName);
        if (fi != null)
        {
            try { return fi.GetValue(obj); } catch { return null; }
        }

        // Last chance: try a public method like Get<PropertyName>()
        var method = t.GetMethod("Get" + propName, new Type[0]);
        if (method != null)
        {
            try { return method.Invoke(obj, null); } catch { return null; }
        }

        return null;
    }

    private string SafeString(object o)
    {
        return o == null ? "—" : System.Web.HttpUtility.HtmlEncode(o.ToString());
    }

    private string SafeDate(object o, string format = "yyyy-MM-dd")
    {
        if (o == null) return "—";
        if (o is DateTime dt) return dt.ToString(format);
        DateTime parsed;
        if (DateTime.TryParse(o.ToString(), out parsed)) return parsed.ToString(format);
        return "—";
    }

    private string SafeBoolLabel(object o)
    {
        if (o == null) return "—";
        bool val;
        if (o is bool b) val = b;
        else if (!bool.TryParse(o.ToString(), out val)) return "—";
        return val ? "Yes" : "No";
    }
}

<div class="card card-soft">
    <div class="card-body">
        <h5 class="mb-3"><i class="bi bi-calendar-event me-2"></i>Due Dates</h5>

        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Policy</th>
                        <th>Holder</th>
                        <th>Due Date</th>
                        <th>Paid</th>
                        <th>Reminder</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model == null)
                    {
                        <tr><td colspan="5" class="text-center text-muted py-4">No data</td></tr>
                    }
                    else
                    {
                        foreach (var d in Model)
                        {
                            var policyVal = GetPropValue(d, "Policy") ?? GetPropValue(d, "PolicyName") ?? GetPropValue(d, "Name");
                            var holderVal = GetPropValue(d, "Holder") ?? GetPropValue(d, "PolicyHolder") ?? GetPropValue(d, "HolderName");
                            var dueVal = GetPropValue(d, "DueDate") ?? GetPropValue(d, "Due") ?? GetPropValue(d, "PaymentDue");
                            var paidVal = GetPropValue(d, "IsPaid") ?? GetPropValue(d, "Paid") ?? GetPropValue(d, "PaidFlag");
                            var reminderVal = GetPropValue(d, "ReminderSent") ?? GetPropValue(d, "Reminder") ?? GetPropValue(d, "ReminderFlag");

                            <tr>
                                <td>@Html.Raw(SafeString(policyVal))</td>
                                <td>@Html.Raw(SafeString(holderVal))</td>
                                <td>@Html.Raw(SafeDate(dueVal))</td>
                                <td>@Html.Raw(SafeBoolLabel(paidVal))</td>
                                <td>@Html.Raw(SafeBoolLabel(reminderVal) == "—" ? "—" : (SafeBoolLabel(reminderVal) == "Yes" ? "Sent" : "—"))</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
