@model Client_model.Models.ChangePasswordVm
@{
    ViewBag.Title = "Change Password";
    Layout = "~/Views/Shared/_AuthLayout.cshtml";  // or use your main layout: "~/Views/Shared/_Layout.cshtml"
}

<div class="container">
    <div class="card auth-card mt-4">
        <div class="row g-0">
            <div class="col-md-5 auth-left d-flex flex-column justify-content-center align-items-center text-white p-4">
                <i class="bi bi-key-fill display-3 mb-3"></i>
                <h3>Change Password</h3>
                <p class="text-center small">For security, choose a strong password and save it somewhere safe.</p>
            </div>

            <div class="col-md-7 auth-right p-4">
                @if (TempData["Success"] != null)
                {
                    <div class="alert alert-success">@TempData["Success"]</div>
                }

                @using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
                {
                    @Html.AntiForgeryToken()

                    @* Show model-level validation summary *@
                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                    <div class="mb-3">
                        @Html.LabelFor(m => m.CurrentPassword, htmlAttributes: new { @class = "form-label" })
                        @Html.PasswordFor(m => m.CurrentPassword, new { @class = "form-control", placeholder = "Enter current password", autocomplete = "current-password" })
                        @Html.ValidationMessageFor(m => m.CurrentPassword, "", new { @class = "text-danger small" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.NewPassword, htmlAttributes: new { @class = "form-label" })
                        @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control", placeholder = "New password (min 6 chars)", autocomplete = "new-password" })
                        @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger small" })
                    </div>

                    <div class="mb-3">
                        @Html.LabelFor(m => m.ConfirmNewPassword, htmlAttributes: new { @class = "form-label" })
                        @Html.PasswordFor(m => m.ConfirmNewPassword, new { @class = "form-control", placeholder = "Confirm new password", autocomplete = "new-password" })
                        @Html.ValidationMessageFor(m => m.ConfirmNewPassword, "", new { @class = "text-danger small" })
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Change password</button>
                        <a href="@Url.Action("MyProfile", "Client")" class="btn btn-outline-secondary">Cancel</a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @* client validation scripts (if not already in layout) *@
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script>
        // small front-end form validation hint (optional)
        (function () {
            'use strict';
            var forms = document.querySelectorAll('.needs-validation');
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();
    </script>
}
