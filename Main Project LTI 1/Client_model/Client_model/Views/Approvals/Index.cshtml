@model IEnumerable<Client_model.Models.PolicyApprovalVm>
@{
    ViewBag.Title = "User Approvals";
}
<div class="card card-soft">
    <div class="card-body">
        <h5 class="mb-3"><i class="bi bi-patch-question me-2"></i>Pending User Approvals</h5>
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger">@TempData["Error"]</div>
        }
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success">@TempData["Success"]</div>
        }
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Holder</th>
                    <th>Policy</th>
                    <th>Status</th>
                    <th>Payment</th>
                    <th>Start</th>
                    <th>End</th>
                    <th>Decision</th>
                    <th>Notes</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var up in Model)
                    {
                        <tr>
                            <td>@Html.Encode(up.Holder)</td>
                            <td>@Html.Encode(up.Policy)</td>
                            <td>@Html.Encode(up.Status)</td>
                            <td>@Html.Encode(up.PaymentStatus)</td>
                            <td>@(up.StartDate?.ToString("yyyy-MM-dd") ?? "")</td>
                            <td>@(up.EndDate?.ToString("yyyy-MM-dd") ?? "")</td>
                            <td>
                                @{
                                    var dec = (up.Decision ?? "NotSet");
                                }
                                @if (dec.Equals("Approved", StringComparison.OrdinalIgnoreCase))
                                {
                                    <span class="badge bg-success">Approved</span>
                                }
                                else if (dec.Equals("Rejected", StringComparison.OrdinalIgnoreCase))
                                {
                                    <span class="badge bg-danger">Rejected</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Pending</span>
                                }
                            </td>
                            <td>@Html.Encode(up.Notes)</td>
                            <td>
                                @* Only show buttons if not approved or rejected *@
                                @if (!((up.Decision ?? "").Equals("Approved", StringComparison.OrdinalIgnoreCase) ||
                                      (up.Decision ?? "").Equals("Rejected", StringComparison.OrdinalIgnoreCase)))
                                {
                                    using (Html.BeginForm("Approve", "Approvals", FormMethod.Post, new { @class = "d-inline" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="userPolicyId" value="@up.UserPolicyID" />
                                        <input type="hidden" name="decision" value="Approved" />
                                        <input type="hidden" name="notes" value="Approved via client approvals UI" />
                                        <button type="submit" class="btn btn-sm btn-success">Approve</button>
                                    }
                                    using (Html.BeginForm("Approve", "Approvals", FormMethod.Post, new { @class = "d-inline ms-1" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="userPolicyId" value="@up.UserPolicyID" />
                                        <input type="hidden" name="decision" value="Rejected" />
                                        <input type="hidden" name="notes" value="Rejected via client approvals UI" />
                                        <button type="submit" class="btn btn-sm btn-danger">Reject</button>
                                    }
                                }
                                else
                                {
                                    <button type="button" class="btn btn-sm btn-outline-secondary" disabled>@dec</button>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="9" class="text-center">No pending approvals found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
